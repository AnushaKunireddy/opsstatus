extends ./layout

block admin-content
	#admin-incidents-create
		.hero
			h1.title= t('admin.incidents.create')
			h2.subtitle Incidents
			ul.hero-menu
				li
					a.is-blue-grey.is-outlined(href='/admin/incidents')
						i.icon-reply
						span= t('actions.backToList')
				li
					button.is-indigo(v-on:click='loadtmplToggle')
						i.icon-marquee-plus
						span= t('admin.incidents.loadTemplate')

		//.content
		if comps.length > 0 && regions.length > 0
			.form-sections
				transition(name="trans-slide", enter-active-class="fadeIn", leave-active-class="fadeOut")
					section.animated(v-cloak, v-show='loadtmplShown')
						label.label= t('admin.incidents.loadTemplate') + '...'
						p.control
							
				section
					label.label= t('admin.incidents.summary')
					p.control.is-fullwidth
						input#incident-summary(type='text', placeholder=t('admin.incidents.summary_placeholder'), v-model='summary')
				section
					label.label= t('admin.incidents.type')
					p.control
						input#schedule_unplanned(name='schedule', type='radio', v-model='type', value='unplanned', checked)
						label(for='schedule_unplanned')= t('admin.incidents.typeUnplanned')
						input#schedule_planned(name='schedule', type='radio', v-model='type', value='scheduled')
						label(for='schedule_planned')= t('admin.incidents.typeScheduled')
				section.info
					
				section
					.columns
						.column.is-one-quarter(v-show='type=="unplanned"')
							label.label= t('admin.incidents.startedOn')
							p.control
								input.datepicker#schedule_actual_start(type='text', placeholder= t('admin.incidents.date_placeholder'), v-model='schedule_actual_start')
							label.label= ' ' + t('admin.incidents.datetimeSeparator') + ' '
							p.control
								input.timepicker#schedule_actual_start_time(type='text', placeholder= t('admin.incidents.time_placeholder'), v-model='schedule_actual_start_time')
						.column(v-cloak, v-show='type=="scheduled"')
							label.label= t('admin.incidents.scheduledStartOn')
							p.control
								input.datepicker#schedule_planned_start(type='text', placeholder= t('admin.incidents.date_placeholder'), v-model='schedule_planned_start')
							label.label= ' ' + t('admin.incidents.datetimeSeparator') + ' '
							p.control
								input.timepicker#schedule_planned_start_time(type='text', placeholder= t('admin.incidents.time_placeholder'), v-model='schedule_planned_start_time')
						.column(v-cloak, v-show='type=="scheduled"')
							label.label= t('admin.incidents.scheduledEndOn')
							p.control
								input.datepicker#schedule_planned_end(type='text', placeholder= t('admin.incidents.date_placeholder'), v-model='schedule_planned_end')
							label.label= ' ' + t('admin.incidents.datetimeSeparator') + ' '
							p.control
								input.timepicker#schedule_planned_end_time(type='text', placeholder= t('admin.incidents.time_placeholder'), v-model='schedule_planned_end_time')
						.column
							label.label= t('admin.incidents.timezone')
							p.control
								select(v-model='timezone')
									each tz in moment.tz.names()
										option(value=tz) #{tz} (#{moment().tz(tz).format('Z z')})
				section
					.columns
						.column.is-one-quarter
							label.label Principal Affected Component
							p.control
								select(v-model='component')
									option(value='') Choose...
									each compGrp in comps
										optgroup(label=compGrp.name)
											each comp in compGrp.components
												option(value=comp.id)= comp.name
						.column
							label.label Related Affected Components
							.columns.is-multiline.is-mobile
								each compGrp in comps
									.column.is-one-third
										strong= compGrp.name
										each comp in compGrp.components
											p.control(v-show="'" + comp.id + "' !== component")
												input(id='aff-comp-' + comp.id, type='checkbox', v-model='regions', value=comp.id)
												label(for='aff-comp-' + comp.id)= comp.name
				section(v-show='type!="scheduled"')
					label.label Incident State
					p.control
						each stVal, stKey in appdata.states
							if stKey !== 'scheduled'
								input(id='state_' + stKey, name='state_' + stKey, type='radio', v-model='componentState', value=stKey)
								label(for='state_' + stKey)= t('states.' + stKey)
				section
					label.label= t('admin.incidents.regions')
					p.control
						each region in regions
							input(id='region-' + region.id, type='checkbox', v-model='regions', value=region.id)
							label(for='region-' + region.id)= region.name
				section
					label.label= t('admin.incidents.content')
					textarea#incident-editor
				section.form-footer
					button.button.is-green#admin-incidents-save
						span
							i.icon-check
							= t('admin.incidents.save')
		else
			.admin-box
				!= t('admin.incidents.missingCompRegion')

		include ../modals/incidents-load-tmpl.pug